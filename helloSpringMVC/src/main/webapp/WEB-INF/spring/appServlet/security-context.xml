<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- security 5 부터는 패스워드에 passwordEncoding 값을 넣어야 한다. / 싫으면 {noop} 을 넣는다. -->
	<security:authentication-manager>
		<!-- 사용자의 정보를 메모리에 저장 -->
		<!--
		<security:authentication-provider>
			<security:user-service>
				<security:user name="binsin" authorities="ROLE_USER" password="{noop}binsin" />
			</security:user-service>
		</security:authentication-provider>
		-->
		
		<!-- 사용자의 정보를 데이터베이스에서 저장 -->
		<!-- https://www.boraji.com/spring-security-5-jdbc-based-authentication-example -->
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select username, password, enabled from users where username=?"
				authorities-by-username-query="select username, authority from authorities where username=?" />
		</security:authentication-provider>
	</security:authentication-manager>

	<!-- 동작은 if/else 와 유사 -->
	<security:http auto-config="true" use-expressions="true">
		<!-- root, offers는 모든 접근 허용 -->
		<security:intercept-url pattern="/" access="permitAll" />
		<security:intercept-url pattern="/offers" access="permitAll" />
		<!-- createoffer는 권한이 있는 사용자만 접근 허용 -->
		<security:intercept-url pattern="/createoffer" access="isAuthenticated()" />
		<security:intercept-url pattern="/resources/**" access="permitAll" />
		<security:intercept-url pattern="/**" access="denyAll" />
	</security:http>
	
</beans>
